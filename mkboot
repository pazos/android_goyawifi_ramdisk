#!/bin/sh
kernel_src="https://github.com/pazos/android_kernel_samsung_goyawifi.git"
toolchain="ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- "
defconfig="goyawifi_defconfig"
zip=lzop # Ramdisk compression [options: gzip | lzop]

show_help(){
  echo "usage:"
  echo "./mklinux bootimg    --> Build a new boot.img based on ramdisk & kernel sources"
  echo "./mklinux build	     --> Forces a new kernel build of kernel and modules"
  echo "./mklinux menuconfig --> Edit kernel configuration"
  echo "./mklinux mrproper   --> Clean kernel tree"
}

check_source(){
  if [ ! -d $base/linux ]; then
    return 1
  else
    return 0
  fi
}

kernel_build(){
  cd linux
  if [ ! -f .config ]; then
    make $toolchain $defconfig
  fi
  make $toolchain
  cd $base
  cp linux/arch/arm/boot/zImage $base/
  rm -rf $base/modules/* && mkdir -p $base/modules
  find linux/ -name '*ko' -exec cp '{}' $base/modules \;
}

kernel_sync(){
  echo "Error, kernel sources not found. Downloading from github.com"
  git clone $kernel_src linux
}

tmpdir_populate(){
  mkdir -p $tmpdir
  cp zImage $tmpdir/
  cp -pR ramdisk/ $tmpdir/
  cp -pR modules/*.ko $tmpdir/ramdisk/lib/modules
  echo "bootsize =
  pagesize = 0x800
  kerneladdr = 0x10008000
  ramdiskaddr = 0x11000000
  secondaddr = 0x10f00000
  tagsaddr = 0x10000100
  name =
  cmdline = " > $tmpdir/custom.cfg
}

create_bootimg(){
  cd $tmpdir/ramdisk
  find . | cpio --create --format='newc' | $zip > ../ramdisk.$zip
  cd $tmpdir
  abootimg --create $base/boot.img -f custom.cfg -k zImage -r ramdisk.$zip >/dev/null 2>&1
  cd $base && rm -rf $tmpdir
}


### main script ###
base=`pwd`
tmpdir=$base/tmp
case $1 in
  build )
    check_source
    if [ $? -eq 1 ]; then
      kernel_sync
    fi
    kernel_build
    ;;
  menuconfig | mrproper )
    check_source
    if [ $? -eq 1 ]; then
      kernel_sync
    fi
    cd linux
	case $1 in menuconfig )
      if [ ! -f .config ]; then make $toolchain $defconfig; fi
      ;;
    esac
    make $toolchain $1
	cd $base
    ;;
  bootimg )
    check_source
    if [ $? -eq 1 ]; then
      kernel_sync
    fi
    if [ ! -f $base/zImage ] || [ ! -d $base/modules ]; then
      kernel_build
    else
	  # do not build the kernel if we already have kernel & modules built
	  # use those binaries instead. You can force a new build with ./mkboot build
	  echo "Prebuild kernel & modules found!, skiping kernel build"
    fi
    tmpdir_populate
	create_bootimg
    ;;
  * )
    show_help
    ;;
esac
